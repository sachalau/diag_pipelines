rule load_tbportals:
    params:
        host = config["db_host"],
        user = config["db_user"],
        db = config["db_name"],
    run:
        from bs4 import BeautifulSoup as bs
        from collections import OrderedDict
        from dateutil import parser
        from collections import defaultdict
        import pandas, urllib3, re, psycopg2
        urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
        conn = psycopg2.connect(host=params["host"],database=params["db"], user=params["user"])
        curr = conn.cursor()
        mappings = {
            "DrugFromDB":{
                "Isoniazid":"H",
                "Rifampicin":"R",
                "Ethambutol":"E",
                "Streptomycin":"S",
                "Ofloxacin":"Ofx",
                "Capreomycin":"Cm",
                "Amikacin":"Am",
                "Kanamycin":"Km",
                "Pyrazinamide":"Z",
                "Levofloxacin":"Lfx",
                "Moxifloxacin":"Mfx",
                "Para-Aminosalicylic Acid":"Pas",
                "Prothionamide":"Pto"
            }
        }
        #Get drugs, medium, methods
        statement = 'SELECT "Name", "Id" FROM "Drug";'
        curr.execute(statement)
        drugs = {mappings["DrugFromDB"][x[0]]:x[1] for x in curr.fetchall()}
        statement = 'SELECT "Name", "Id" FROM "PhenotypicDrugSusceptibilityAssessmentMethod";'
        curr.execute(statement)
        methods = {x[0]:x[1] for x in curr.fetchall()}
        methods["Bactec"] = methods["Direct"]
        methods["Lowenstein-Jensen"] = None
        statement = 'SELECT "Name", "Id" FROM "Medium";'
        curr.execute(statement)
        mediums = {x[0]:x[1] for x in curr.fetchall()}
        mediums["Bactec"] = mediums["MGIT"]
        prefix = "NIAID_TBPortals_"
        statement = 'SELECT "Name", "Id" FROM "Specimen" WHERE "Name" LIKE ' + "'" + prefix + "';"
        curr.execute(statement)
        specimen = {x[0]:x[1] for x in curr.fetchall()}
        statement = 'SELECT "Name", "Id" FROM "Patient" WHERE "Name" LIKE ' + "'" + prefix + "';"
        curr.execute(statement)
        patients = {x[0]:x[1] for x in curr.fetchall()}
    
        print(mediums, drugs, methods)
        def extract_data(html):
            dic={}
            soup=bs(html, "html.parser")
            for li in soup.find_all("li"):
                if "Patient: " in li.get_text():
                    patient="".join(li.get_text().replace("Patient:", "").split())
            if prefix + patient not in patients.keys():
                curr.execute('INSERT INTO "Patient"("Name") VALUES (%s) RETURNING "Id";', [prefix + patient])
                patients[prefix+patient] = curr.fetchone()[0]
            patient_id = patients[prefix+patient]
            for h5 in soup.find_all("h5"):
                if h5.get_text()=="Genomes":
                    table = h5.find_next("table")
                    values = table.find_next("tbody").findAll("tr")
                    header = table.find_next("thead").findAll("th")
                    l = [k.get_text() for k in header]
                    for u in values:
                        cells=u.findAll("td")
                        v=[s.strip() for s in [k.get_text() for k in cells]]
                        specimen_name = v[0]
                        if prefix + specimen_name not in specimen.keys():
                            curr.execute('INSERT INTO "Specimen" ("Name", "SampledFrom") VALUES(%s, %s) RETURNING "Id";', [prefix + specimen_name, patient_id])
                            specimen[prefix+specimen_name] = curr.fetchone()[0]
                        for i in range(1,8):
                            if l[i]=="Sequence Read Archive":
                                for sra in v[i].split(","):
                                    try:
                                        curr.execute('INSERT INTO "Library" ("PreparedFrom", "Name") VALUES(%s, %s);', [specimen[prefix+specimen_name], sra.strip()])
                                    except psycopg2.DatabaseError as error:
                                        if error.pgcode == "23505":
                                            print("Library " + sra.strip() + " already inserted")
                                            raise
                                        else:
                                            raise
                if h5.get_text()=="Drug susceptibility testing":
                    table = h5.find_next("table")
                    header = table.find_next("thead").findAll("th")
                    l = [k.get_text() for k in header]
                    values = table.find_next("tbody").findAll("tr")
                    for u in values:
                        cells=u.findAll("td")
                        v=[s.strip() for s in [k.get_text() for k in cells]]
                        if not v or v[2].strip("\n")=="SNP Mutations":
                            break
                        else:
                            specimen_name = v[0]
                            if prefix + specimen_name not in specimen.keys():
                                curr.execute('INSERT INTO "Specimen" ("Name", "SampledFrom") VALUES(%s, %s) RETURNING "Id";', [prefix + specimen_name, patient_id])
                                specimen[prefix+specimen_name] = curr.fetchone()[0]
                            if v[1] in ["Lowenstein-Jensen", "Bactec"]:
                                tmp_dict = {}
                                for i in range(2, len(v)):
                                    if l[i]=="Date":
                                        date = int(v[i].strip("Day "))
                                    elif v[i]:
                                        tmp_dict[l[i]]=v[i]
                                for key, value in tmp_dict.items():
                                    if key.split(" ")[0] in mappings["DrugFromDB"].values():
                                        concentration = None
                                        if len(key.split(" "))>1:
                                            concentration = float(key.split(" ")[1])
                                        curr.execute('INSERT INTO "PhenotypicDrugSusceptibilityTest" ("SpecimenId", "DrugId", "MediumId", "MethodId", "Concentration", "Result") VALUES (%s, %s, %s, %s, %s, %s);', (specimen[prefix+specimen_name], drugs[key.split(" ")[0]], mediums[v[1]], methods[v[1]], concentration, value))

        http = urllib3.PoolManager()
        all_data = http.request("GET", "https://data.tbportals.niaid.nih.gov/cases?dstProfile=sensitive%2CMDRnonXDR%2CpolyDR%2CmonoDR%2CXDR&sequenced=True&_take=100000")
        match = re.compile("/patient/[a-z,0-9]{8}-[a-z,0-9]{4}-[a-z,0-9]{4}-[a-z,0-9]{4}-[a-z,0-9]{12}/case/details/[a-z,0-9]{8}-[a-z,0-9]{4}-[a-z,0-9]{4}-[a-z,0-9]{4}-[a-z,0-9]{12}")
        print(len(re.findall(match, str(all_data.data))))
        for url in re.findall(match, str(all_data.data)):
            patient_data = http.request("GET", "https://data.tbportals.niaid.nih.gov/" + url)
            extract_data(patient_data.data)
        conn.commit()
            


