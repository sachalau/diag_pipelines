rule prepare_gff_for_db:
    input:
        gff = "{any_gff}.gff",
    output:
        genes = "{any_gff}_genes.tsv",
        proteins = "{any_gff}_proteins.tsv",
        non_coding_transcripts = "{any_gff}_nc_transcripts.tsv",
    run:
        from BCBio import GFF
        import psycopg2, pandas
        
        gene_data = []
        protein_data = []
        nc_transcripts_data = []
        gff = GFF.parse(open(input["gff"]))
        for seq_record in gff:
            for features in seq_record.features:
                if features.type=="gene":
                    gene_data.append([features.qualifiers["Dbxref"][0].replace("GeneID:", ""), features.location.start, features.location.end, features.location.strand, features.qualifiers["locus_tag"][0], features.qualifiers["Name"][0], features.qualifiers.get("gene_synonym", [""])[0]])
        gff_protein = GFF.parse(open(input["gff"]), limit_info={'gff_source_type':[('RefSeq', 'CDS')], 'gff_source':['RefSeq']})
        for seq_record in gff_protein:
            for features in seq_record.features:
                protein_data.append([features.qualifiers["Name"][0], features.qualifiers["locus_tag"][0], (features.location.end-features.location.start)/3-1, features.qualifiers.get("product", [""])[0]])
        gff_ncoding = GFF.parse(open(input["gff"]), limit_info={'gff_source_type':[('RefSeq', 'exon')], 'gff_source':['RefSeq']})
        for seq_record in gff_ncoding:
            for features in seq_record.features:
                nc_transcripts_data.append([features.qualifiers["locus_tag"][0], features.qualifiers.get("product", [""])[0]])
        pandas.DataFrame(gene_data).to_csv(output["genes"], sep="\t", header=False, index=False)
        pandas.DataFrame(protein_data).to_csv(output["proteins"], sep="\t", header=False, index=False)
        pandas.DataFrame(nc_transcripts_data).to_csv(output["non_coding_transcripts"], sep="\t", header=False, index=False)


rule load_all_data_for_library:
    params:
        host = config["db_host"],
        user = config["db_user"],
        db = config["db_name"],
    input:
        genotype_formated = "samples/{sample}/genotyping/{any_genotyper}/{reference}/{any_mapper}/{any_vcf}/snps_split_snpEff_formated_genotype.tsv",
        formated = "samples/{sample}/genotyping/{any_genotyper}/{reference}/{any_mapper}/{any_vcf}/snps_split_snpEff_formated.tsv",
    output:
        loaded = "samples/{sample}/genotyping/{any_genotyper}/{reference}/{any_mapper}/{any_vcf}/snps_genotype_loaded.txt",
    run:
        import psycopg2, pandas
        conn = psycopg2.connect(host=params["host"], database=params["db"], user=params["user"])
        curr = conn.cursor()
        genotypes = pandas.read_csv(input["genotype_formated"], sep="\t", header=None, names=["Sample", "Chrom", "Pos", "Ref", "Alt", "QUAL", "AD", "DP", "Filter"])
        annotations = pandas.read_csv(input["formated"], sep="\t", header=0)
        genotypes[["ref_AD", "alt_AD"]] = genotypes["AD"].str.split(",", expand=True).astype(int)
        curr.execute('SELECT "bioentry_id" FROM "bioentry" WHERE "identifier"=%s;', [genotypes[["Chrom"]].iloc[0,0]])
        bioentry_id = curr.fetchone()[0]
        statement = 'Select "Name", "Id" FROM "Library";'
        curr.execute('Select "Name", "Id" FROM "Library" WHERE "Name"=%s;', [wildcards["sample"]])
        try:
            sample_id = curr.fetchone()[0]
        except TypeError:
            curr.execute('INSERT INTO "Library"("Name") VALUES (%s) RETURNING "Id";', [wildcards["sample"]])
            sample_id = curr.fetchone()[0]
        statement = 'SELECT "Chrom", "Pos", "RefNucl", "AltNucl", "Id" FROM "Variant";'
        curr.execute(statement)
        variants = {(x[0], x[1], x[2], x[3]):x[4] for x in curr.fetchall()}
        print(sample_id)
        for index, row in genotypes.iterrows():
            if (bioentry_id, row["Pos"], row["Ref"], row["Alt"]) not in variants.keys():
                curr.execute('INSERT INTO "Variant"("Chrom", "Pos", "RefNucl", "AltNucl") VALUES(%s, %s, %s, %s) RETURNING "Id";', [bioentry_id] + list(row[["Pos", "Ref", "Alt"]]))
                variants[(bioentry_id, row["Pos"], row["Ref"], row["Alt"])]= curr.fetchone()[0]
            variant_id = variants[(bioentry_id, row["Pos"], row["Ref"], row["Alt"])]
            try:
                curr.execute('INSERT INTO "Genotype"("VariantId", "LibraryId", "Quality", "RefAD", "AltAD", "TotalDP") VALUES(%s, %s, %s, %s, %s, %s);', [variant_id] + [sample_id] + list(row[["QUAL", "ref_AD", "alt_AD", "DP"]]))
            except psycopg2.DatabaseError as error:
                if error.pgcode == "23505":
                    conn.rollback()
                else:
                    raise(error)
        annotation_variants=pandas.read_csv(input["formated"], sep="\t", header=0)
        #Statement to fetch all gene ids
        statement = "SELECT value, seqfeature.seqfeature_id FROM seqfeature INNER JOIN seqfeature_qualifier_value ON seqfeature_qualifier_value.seqfeature_id=seqfeature.seqfeature_id INNER JOIN term term1 on seqfeature.type_term_id=term1.term_id  INNER JOIN term term2 ON seqfeature_qualifier_value.term_id=term2.term_id INNER JOIN ontology ON ontology.ontology_id = term2.ontology_id WHERE ontology.name='Annotation Tags' AND term2.name='locus_tag' AND term1.name='gene';"
        curr.execute(statement)
        locus_tags_ids = {x[0]:x[1] for x in curr.fetchall()}
        statement = 'SELECT * FROM "Annotation";'
        curr.execute(statement)
        annotation_ids = {(x[1], x[2], x[3], x[4]) : x[0] for x in curr.fetchall()}
        statement = 'SELECT * FROM "VariantToAnnotation";'
        curr.execute(statement)
        variant_to_annotation = [(x[0], x[1]) for x in curr.fetchall()]
        for index, row in annotations.iterrows():
            try:
                if (locus_tags_ids[row["GeneId"]], row["Type"], int(row["Dist"]), row["snpEffHGVS"]) not in annotation_ids.keys():
                    curr.execute('INSERT INTO "Annotation"("GeneId", "Type", "Dist", "snpEffHGVSNotation") VALUES (%s, %s, %s, %s) RETURNING "Id";', [locus_tags_ids[row["GeneId"]], row["Type"], int(row["Dist"]), row["snpEffHGVS"]])
                    annotation_ids[(locus_tags_ids[row["GeneId"]], row["Type"], int(row["Dist"]), row["snpEffHGVS"])] = curr.fetchone()[0]
                    curr.execute('INSERT INTO "VariantToAnnotation"("VariantId", "AnnotationId") VALUES (%s, %s);', (variants[(bioentry_id, int(row["Pos"]), row["Ref"], row["Alt"])], annotation_ids[(locus_tags_ids[row["GeneId"]], row["Type"], int(row["Dist"]), row["snpEffHGVS"])]))
                elif (variants[(bioentry_id, int(row["Pos"]), row["Ref"], row["Alt"])], annotation_ids[(locus_tags_ids[row["GeneId"]], row["Type"], int(row["Dist"]), row["snpEffHGVS"])]) not in variant_to_annotation:
                    curr.execute('INSERT INTO "VariantToAnnotation"("VariantId", "AnnotationId") VALUES (%s, %s);', (variants[(bioentry_id, int(row["Pos"]), row["Ref"], row["Alt"])], annotation_ids[(locus_tags_ids[row["GeneId"]], row["Type"], int(row["Dist"]), row["snpEffHGVS"])]))
            except KeyError:
                raise ValueError(row)
            except ValueError:
                raise ValueError(row)
        conn.commit()
        curr.close()
        open(output["loaded"], "w").close()


                


rule load_genotype_into_db:
    input:
        vcf_formated = "{any_vcf}_formated_genotype.tsv",
        variants_loaded = "{any_vcf}_variant_loaded.txt",
    output:
        loaded = "{any_vcf}_genotype_loaded2.txt",
    run:
        import psycopg2, pandas
        conn = psycopg2.connect(host="localhost",database="ReSeqWHO", user="postgres", password="postgres")
        curr = conn.cursor()
        variants = pandas.read_csv(input["vcf_formated"], sep="\t", header=None, names=["Sample", "Chrom", "Pos", "Ref", "Alt", "QUAL", "AD", "DP", "Filter"])
        variants[["ref_AD", "alt_AD"]] = variants["AD"].str.split(",", expand=True).astype(int)
        for index, row in variants.iterrows():
            curr.execute('SELECT "VariantId" FROM "Variant" WHERE "Chrom" = %s AND "Pos" = %s AND "RefNucl" = %s AND "AltNucl" = %s;', row[["Chrom", "Pos", "Ref", "Alt"]])
            variant_id = curr.fetchone()[0]
            try:
                curr.execute('INSERT INTO "Genotype"("VariantId", "SequencedLibraryId", "QualValue", "RefAD", "AltAD", "TotalDP", "Filter") VALUES(%s, %s, %s, %s, %s, %s, %s);', [variant_id] + list(row[["Sample", "QUAL", "ref_AD", "alt_AD", "DP", "Filter"]]))
                conn.commit()
            except psycopg2.DatabaseError as error:
                if error.pgcode == "23505":
                    conn.rollback()
                else:
                    print(error)
        curr.close()
        open(output["loaded"], "w").close()


        
        
rule load_variant_into_db:
    input:
        vcf_formated = "{any_vcf}_formated_variant.tsv",
    output:
        loaded = "{any_vcf}_variant_loaded.txt",
    run:
        import psycopg2, pandas
        conn = psycopg2.connect(host="localhost",database="ReSeqWHO", user="postgres", password="postgres")
        curr = conn.cursor()
        variants = pandas.read_csv(input["vcf_formated"], sep="\t", header=None)
        for index, row in variants.iterrows():
            try:
                curr.execute('INSERT INTO "Variant"("Chrom", "Pos", "RefNucl", "AltNucl") VALUES(%s, %s, %s, %s);', row)
                conn.commit()
            except psycopg2.DatabaseError as error:
                if error.pgcode == "23505":
                    conn.rollback()
                else:
                    print(error)
        curr.close()
        open(output["loaded"], "w").close()

        
        
rule load_protein_change_into_db:
    input:
        substitution = "{any_vcf}_snpEff_formated_protein_change.tsv",
        variants_loaded = "{any_vcf}_snpEff_variant_loaded.txt",
        genotypes_loaded = "{any_vcf}_snpEff_genotype_loaded.txt",
    output:
        loaded = "{any_vcf}_snpEff_protein_change_loaded.txt",
    run:
        import psycopg2, pandas, numpy
        conn = psycopg2.connect(host="localhost",database="ReSeqWHO", user="postgres", password="postgres")
        curr = conn.cursor()
        substitutions = pandas.read_csv(input["substitution"], sep="\t", header=0)
        for index, row in substitutions.replace(numpy.nan, "").iterrows():
            curr.execute('Select "ProteinId" FROM "Gene" NATURAL JOIN "Protein" WHERE "GeneId"=%s;', [row["Gene_ID"].replace("gene-", "")])
            protein_id = curr.fetchone()[0]
            curr.execute('SELECT "VariantId" FROM "Variant" WHERE "Chrom" = %s AND "Pos" = %s AND "RefNucl" = %s AND "AltNucl" = %s;', row[["Chrom", "Pos", "Ref", "Alt"]])
            variant_id = curr.fetchone()[0]
            curr.execute('SELECT "ProteinChangeId" FROM "ProteinChange" WHERE "ProteinId"=%s AND "Type"=%s AND "StartPos"=%s AND "EndPos"=%s AND "StartAA"=%s AND "EndAA"=%s AND "AltAA"=%s AND "InsertionLength"=%s;', [protein_id] + list(row[["type", "start_pos", "end_pos", "start_AA", "end_AA", "alt_AA", "insertion_length"]]))
            annot_id = curr.fetchone()
            if annot_id is None:
                curr.execute('INSERT INTO "ProteinChange"("ProteinId", "Type", "StartPos", "EndPos", "StartAA", "EndAA", "AltAA", "InsertionLength") VALUES(%s, %s, %s, %s, %s, %s, %s, %s) RETURNING "ProteinChangeId";', [protein_id] + list(row[["type", "start_pos", "end_pos", "start_AA", "end_AA", "alt_AA", "insertion_length"]]))
                annot_id = curr.fetchone()[0]
                curr.execute('INSERT INTO "VariantToProteinChange"("VariantId", "ProteinChangeId") VALUES(%s, %s);', (variant_id, annot_id))
                conn.commit()
            else:
                try:
                    curr.execute('INSERT INTO "VariantToProteinChange"("VariantId", "ProteinChangeId") VALUES(%s, %s);', (variant_id, annot_id))
                    conn.commit()
                except psycopg2.DatabaseError as error:
                    if error.pgcode == "23505":
                        conn.rollback()
                    else:
                        print(error)
        curr.close()
        open(output["loaded"], "w").close()
