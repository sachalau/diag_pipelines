import pandas

pipeline_path = workflow.basedir + "/../../"

include:
    pipeline_path + "workflows/logging.rules"
    
include:
    pipeline_path + "rules/downloading/fetch_single_reference.rules"
    
enterobase = pandas.read_csv(pipeline_path + "data/core_genome_dbs/enterobase_database.tsv", sep="\t", index_col=0)

rule get_schema_from_enterobase:
    input:
        data = pipeline_path + "data/{spec}/cgMLST.tsv"
    output:
        gene_list = "core_genomes/cgMLST/{spec}/genes.txt",
    shell:
        """
        cut -f 2 {input[data]} | cut -f 1 -d' ' | tail -n +2 > {output[gene_list]}
        """

rule fetch_gene_entries_from_locus_tag:
    conda:
        pipeline_path + "envs/biopython.yml"
    input:
        gbk = lambda wildcards : "references/" + str(enterobase.loc[wildcards.spec, "ReferenceGenome"]) + "/genome_gbwithparts.gbwithparts",
        locus_list = "core_genomes/cgMLST/{spec}/genes.txt",
    output:
        bed = "core_genomes/cgMLST/{spec}.bed",
        problematic = "core_genomes/cgMLST/{spec}/enterobase_missing.txt",
    script:
        pipeline_path + "rules/core_genome/scripts/parse_gff_extract_locus_tags.py"

